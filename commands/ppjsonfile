#!  /usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import ast

import itertools
import json



def i(level):
    o = ""
    while level > 1:
        o += "    "
        level -= 1
    return o

def _check(value, t):
    return isinstance(value, t) or issubclass(type(value), t)

def check(value):
    return _check(value, dict) or _check(value, list) or _check(value, tuple)

def get_keys(target):
    if isinstance(target, dict):
        return target.keys()
    elif isinstance(target, list) or isinstance(target, tuple):
        return xrange(len(target))


def _get_values(target):
    for x in target:
        yield x

def get_values(target):
    if isinstance(target, dict):
        return target.values()
    elif isinstance(target, list) or isinstance(target, tuple):
        return _get_values(target)

def print_loop(target, key=None, indentation=0):
    ind = i(indentation)
    if check(target) and target != []:
        if key is not None:
            print(u"{}{}:".format(ind, key))
        indentation += 1
        for k, v in itertools.izip(get_keys(target), get_values(target)):
            print_loop(v, k, indentation)
        indentation -= 1
    else:
        if key is not None:
            print(u"{}{}: {}".format(ind, key, target))
        else:
            print u"{}{}".format(ind, target)

p = argparse.ArgumentParser()
p.add_argument("file", type=str, nargs="*", help="file or files to print")

args = p.parse_args()

# args.LIST = args.LIST.replace("\n", "")
# args.LIST = args.LIST.replace("\r", "")
# args.LIST = args.LIST.replace("\t", "")
# args.LIST = args.LIST.replace("\"", "'")
# args.LIST = args.LIST.replace("  ", " ").replace("  ", " ").replace("  ", " ").replace("  ", " ").replace("  ", " ")


for path in args.file:
    try:
        print_loop("evalf")
        with open(path) as f:
            data = ast.literal_eval(f.read())
    except:
        print_loop("jsonf")
        with open(path) as f:
            data = json.load(f, encoding="utf-8")

    print_loop(data)
